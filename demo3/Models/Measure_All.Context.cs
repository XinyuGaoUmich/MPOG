//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace demo3.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MPOG_XinyuEntities4 : DbContext
    {
        public MPOG_XinyuEntities4()
            : base("name=MPOG_XinyuEntities4")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Status_Type> Status_Type { get; set; }
        public virtual DbSet<Responsible_Provider_Unpublished> Responsible_Provider_Unpublished { get; set; }
        public virtual DbSet<Enumeration_Measure_Type> Enumeration_Measure_Type { get; set; }
        public virtual DbSet<Enumeration_NQS_Domain> Enumeration_NQS_Domain { get; set; }
        public virtual DbSet<Enumeration_Responsible_Provider> Enumeration_Responsible_Provider { get; set; }
        public virtual DbSet<Enumeration_Scope> Enumeration_Scope { get; set; }
        public virtual DbSet<Responsible_Provider_Published> Responsible_Provider_Published { get; set; }
    
        public virtual ObjectResult<Details_All_Result> Details_All(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Details_All_Result>("Details_All", measure_IDParameter);
        }
    
        public virtual ObjectResult<Collations_Result> Collations(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Collations_Result>("Collations", measure_IDParameter);
        }
    
        public virtual ObjectResult<Data_Diagnostics_Affected_Result> Data_Diagnostics_Affected(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Data_Diagnostics_Affected_Result>("Data_Diagnostics_Affected", measure_IDParameter);
        }
    
        public virtual ObjectResult<MPOG_Concept_ID_Required_Result> MPOG_Concept_ID_Required(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MPOG_Concept_ID_Required_Result>("MPOG_Concept_ID_Required", measure_IDParameter);
        }
    
        public virtual ObjectResult<Pager_Result> Pager(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pager_Result>("Pager", measure_IDParameter);
        }
    
        public virtual ObjectResult<Spec_Result> Spec(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spec_Result>("Spec", measure_IDParameter);
        }
    
        public virtual ObjectResult<Public_Measure_Result> Public_Measure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Public_Measure_Result>("Public_Measure");
        }
    
        public virtual ObjectResult<Pager_Auth_Result> Pager_Auth(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pager_Auth_Result>("Pager_Auth", measure_IDParameter);
        }
    
        public virtual ObjectResult<Measure_List_Result> Measure_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_List_Result>("Measure_List");
        }
    
        public virtual int Update_Status(Nullable<int> measure_ID, Nullable<int> status_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var status_IDParameter = status_ID.HasValue ?
                new ObjectParameter("Status_ID", status_ID) :
                new ObjectParameter("Status_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Status", measure_IDParameter, status_IDParameter);
        }
    
        public virtual int Add_Measure(string measure_Abbreviation, string measure_Title, Nullable<int> nQS_Domain, string qCDR_Measure_Name, Nullable<bool> vBR, string clinical_Lead, string developer, Nullable<bool> measure_Spec_Completed, Nullable<System.DateTime> date_Published, Nullable<int> status_ID)
        {
            var measure_AbbreviationParameter = measure_Abbreviation != null ?
                new ObjectParameter("Measure_Abbreviation", measure_Abbreviation) :
                new ObjectParameter("Measure_Abbreviation", typeof(string));
    
            var measure_TitleParameter = measure_Title != null ?
                new ObjectParameter("Measure_Title", measure_Title) :
                new ObjectParameter("Measure_Title", typeof(string));
    
            var nQS_DomainParameter = nQS_Domain.HasValue ?
                new ObjectParameter("NQS_Domain", nQS_Domain) :
                new ObjectParameter("NQS_Domain", typeof(int));
    
            var qCDR_Measure_NameParameter = qCDR_Measure_Name != null ?
                new ObjectParameter("QCDR_Measure_Name", qCDR_Measure_Name) :
                new ObjectParameter("QCDR_Measure_Name", typeof(string));
    
            var vBRParameter = vBR.HasValue ?
                new ObjectParameter("VBR", vBR) :
                new ObjectParameter("VBR", typeof(bool));
    
            var clinical_LeadParameter = clinical_Lead != null ?
                new ObjectParameter("Clinical_Lead", clinical_Lead) :
                new ObjectParameter("Clinical_Lead", typeof(string));
    
            var developerParameter = developer != null ?
                new ObjectParameter("Developer", developer) :
                new ObjectParameter("Developer", typeof(string));
    
            var measure_Spec_CompletedParameter = measure_Spec_Completed.HasValue ?
                new ObjectParameter("Measure_Spec_Completed", measure_Spec_Completed) :
                new ObjectParameter("Measure_Spec_Completed", typeof(bool));
    
            var date_PublishedParameter = date_Published.HasValue ?
                new ObjectParameter("Date_Published", date_Published) :
                new ObjectParameter("Date_Published", typeof(System.DateTime));
    
            var status_IDParameter = status_ID.HasValue ?
                new ObjectParameter("Status_ID", status_ID) :
                new ObjectParameter("Status_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Measure", measure_AbbreviationParameter, measure_TitleParameter, nQS_DomainParameter, qCDR_Measure_NameParameter, vBRParameter, clinical_LeadParameter, developerParameter, measure_Spec_CompletedParameter, date_PublishedParameter, status_IDParameter);
        }
    
        public virtual int Edit_Measure(Nullable<int> measure_ID, string measure_Abbreviation, string measure_Title, Nullable<int> nQS_Domain, string qCDR_Measure_Name, Nullable<bool> vBR, string clinical_Lead, string developer, Nullable<bool> measure_Spec_Completed, Nullable<System.DateTime> date_Published, Nullable<int> status_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var measure_AbbreviationParameter = measure_Abbreviation != null ?
                new ObjectParameter("Measure_Abbreviation", measure_Abbreviation) :
                new ObjectParameter("Measure_Abbreviation", typeof(string));
    
            var measure_TitleParameter = measure_Title != null ?
                new ObjectParameter("Measure_Title", measure_Title) :
                new ObjectParameter("Measure_Title", typeof(string));
    
            var nQS_DomainParameter = nQS_Domain.HasValue ?
                new ObjectParameter("NQS_Domain", nQS_Domain) :
                new ObjectParameter("NQS_Domain", typeof(int));
    
            var qCDR_Measure_NameParameter = qCDR_Measure_Name != null ?
                new ObjectParameter("QCDR_Measure_Name", qCDR_Measure_Name) :
                new ObjectParameter("QCDR_Measure_Name", typeof(string));
    
            var vBRParameter = vBR.HasValue ?
                new ObjectParameter("VBR", vBR) :
                new ObjectParameter("VBR", typeof(bool));
    
            var clinical_LeadParameter = clinical_Lead != null ?
                new ObjectParameter("Clinical_Lead", clinical_Lead) :
                new ObjectParameter("Clinical_Lead", typeof(string));
    
            var developerParameter = developer != null ?
                new ObjectParameter("Developer", developer) :
                new ObjectParameter("Developer", typeof(string));
    
            var measure_Spec_CompletedParameter = measure_Spec_Completed.HasValue ?
                new ObjectParameter("Measure_Spec_Completed", measure_Spec_Completed) :
                new ObjectParameter("Measure_Spec_Completed", typeof(bool));
    
            var date_PublishedParameter = date_Published.HasValue ?
                new ObjectParameter("Date_Published", date_Published) :
                new ObjectParameter("Date_Published", typeof(System.DateTime));
    
            var status_IDParameter = status_ID.HasValue ?
                new ObjectParameter("Status_ID", status_ID) :
                new ObjectParameter("Status_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Edit_Measure", measure_IDParameter, measure_AbbreviationParameter, measure_TitleParameter, nQS_DomainParameter, qCDR_Measure_NameParameter, vBRParameter, clinical_LeadParameter, developerParameter, measure_Spec_CompletedParameter, date_PublishedParameter, status_IDParameter);
        }
    
        public virtual ObjectResult<Spec_Published_Result> Spec_Published(Nullable<int> measure_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spec_Published_Result>("Spec_Published", measure_IDParameter);
        }
    
        public virtual int Add_Existing_Provider(Nullable<int> measure_ID, Nullable<int> responsible_Provider_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var responsible_Provider_IDParameter = responsible_Provider_ID.HasValue ?
                new ObjectParameter("Responsible_Provider_ID", responsible_Provider_ID) :
                new ObjectParameter("Responsible_Provider_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Existing_Provider", measure_IDParameter, responsible_Provider_IDParameter);
        }
    
        public virtual int Add_New_Provider(Nullable<int> measure_ID, string responsible_Provider_Name)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var responsible_Provider_NameParameter = responsible_Provider_Name != null ?
                new ObjectParameter("Responsible_Provider_Name", responsible_Provider_Name) :
                new ObjectParameter("Responsible_Provider_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_New_Provider", measure_IDParameter, responsible_Provider_NameParameter);
        }
    
        public virtual int Delete_Provider(Nullable<int> measure_ID, Nullable<int> responsible_Provider_ID)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var responsible_Provider_IDParameter = responsible_Provider_ID.HasValue ?
                new ObjectParameter("Responsible_Provider_ID", responsible_Provider_ID) :
                new ObjectParameter("Responsible_Provider_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Provider", measure_IDParameter, responsible_Provider_IDParameter);
        }
    
        public virtual int Save_Pager(Nullable<int> measure_ID, string measure_Abbreviation, string data_Collection_Method, string description, Nullable<int> nQS_Domain, Nullable<int> measure_Type, Nullable<int> scope, string measure_Summary, string inclusions, string exclusions, string success, Nullable<decimal> threshold, Nullable<int> responsible_Provider, string risk_Adjustment, string reference)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var measure_AbbreviationParameter = measure_Abbreviation != null ?
                new ObjectParameter("Measure_Abbreviation", measure_Abbreviation) :
                new ObjectParameter("Measure_Abbreviation", typeof(string));
    
            var data_Collection_MethodParameter = data_Collection_Method != null ?
                new ObjectParameter("Data_Collection_Method", data_Collection_Method) :
                new ObjectParameter("Data_Collection_Method", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var nQS_DomainParameter = nQS_Domain.HasValue ?
                new ObjectParameter("NQS_Domain", nQS_Domain) :
                new ObjectParameter("NQS_Domain", typeof(int));
    
            var measure_TypeParameter = measure_Type.HasValue ?
                new ObjectParameter("Measure_Type", measure_Type) :
                new ObjectParameter("Measure_Type", typeof(int));
    
            var scopeParameter = scope.HasValue ?
                new ObjectParameter("Scope", scope) :
                new ObjectParameter("Scope", typeof(int));
    
            var measure_SummaryParameter = measure_Summary != null ?
                new ObjectParameter("Measure_Summary", measure_Summary) :
                new ObjectParameter("Measure_Summary", typeof(string));
    
            var inclusionsParameter = inclusions != null ?
                new ObjectParameter("Inclusions", inclusions) :
                new ObjectParameter("Inclusions", typeof(string));
    
            var exclusionsParameter = exclusions != null ?
                new ObjectParameter("Exclusions", exclusions) :
                new ObjectParameter("Exclusions", typeof(string));
    
            var successParameter = success != null ?
                new ObjectParameter("Success", success) :
                new ObjectParameter("Success", typeof(string));
    
            var thresholdParameter = threshold.HasValue ?
                new ObjectParameter("Threshold", threshold) :
                new ObjectParameter("Threshold", typeof(decimal));
    
            var responsible_ProviderParameter = responsible_Provider.HasValue ?
                new ObjectParameter("Responsible_Provider", responsible_Provider) :
                new ObjectParameter("Responsible_Provider", typeof(int));
    
            var risk_AdjustmentParameter = risk_Adjustment != null ?
                new ObjectParameter("Risk_Adjustment", risk_Adjustment) :
                new ObjectParameter("Risk_Adjustment", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Save_Pager", measure_IDParameter, measure_AbbreviationParameter, data_Collection_MethodParameter, descriptionParameter, nQS_DomainParameter, measure_TypeParameter, scopeParameter, measure_SummaryParameter, inclusionsParameter, exclusionsParameter, successParameter, thresholdParameter, responsible_ProviderParameter, risk_AdjustmentParameter, referenceParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Provider_Published_Result> Measure_Of_Provider_Published(Nullable<int> responsible_Provider_ID)
        {
            var responsible_Provider_IDParameter = responsible_Provider_ID.HasValue ?
                new ObjectParameter("Responsible_Provider_ID", responsible_Provider_ID) :
                new ObjectParameter("Responsible_Provider_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Provider_Published_Result>("Measure_Of_Provider_Published", responsible_Provider_IDParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Provider_Unpublished_Result> Measure_Of_Provider_Unpublished(Nullable<int> responsible_Provider_ID)
        {
            var responsible_Provider_IDParameter = responsible_Provider_ID.HasValue ?
                new ObjectParameter("Responsible_Provider_ID", responsible_Provider_ID) :
                new ObjectParameter("Responsible_Provider_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Provider_Unpublished_Result>("Measure_Of_Provider_Unpublished", responsible_Provider_IDParameter);
        }
    
        public virtual int Edit_Provider(Nullable<int> responsible_Provider_ID, string responsible_Provider_Name)
        {
            var responsible_Provider_IDParameter = responsible_Provider_ID.HasValue ?
                new ObjectParameter("Responsible_Provider_ID", responsible_Provider_ID) :
                new ObjectParameter("Responsible_Provider_ID", typeof(int));
    
            var responsible_Provider_NameParameter = responsible_Provider_Name != null ?
                new ObjectParameter("Responsible_Provider_Name", responsible_Provider_Name) :
                new ObjectParameter("Responsible_Provider_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Edit_Provider", responsible_Provider_IDParameter, responsible_Provider_NameParameter);
        }
    
        public virtual int Add_New_Domain(Nullable<int> measure_ID, string nQS_Domain_Name)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var nQS_Domain_NameParameter = nQS_Domain_Name != null ?
                new ObjectParameter("NQS_Domain_Name", nQS_Domain_Name) :
                new ObjectParameter("NQS_Domain_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_New_Domain", measure_IDParameter, nQS_Domain_NameParameter);
        }
    
        public virtual int Add_New_Measure_Type(Nullable<int> measure_ID, string measure_Type_Name)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var measure_Type_NameParameter = measure_Type_Name != null ?
                new ObjectParameter("Measure_Type_Name", measure_Type_Name) :
                new ObjectParameter("Measure_Type_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_New_Measure_Type", measure_IDParameter, measure_Type_NameParameter);
        }
    
        public virtual int Add_New_Measure_Scope(Nullable<int> measure_ID, string scope_Name)
        {
            var measure_IDParameter = measure_ID.HasValue ?
                new ObjectParameter("Measure_ID", measure_ID) :
                new ObjectParameter("Measure_ID", typeof(int));
    
            var scope_NameParameter = scope_Name != null ?
                new ObjectParameter("Scope_Name", scope_Name) :
                new ObjectParameter("Scope_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_New_Measure_Scope", measure_IDParameter, scope_NameParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Domain_Published_Result> Measure_Of_Domain_Published(Nullable<int> nQS_Domain_ID)
        {
            var nQS_Domain_IDParameter = nQS_Domain_ID.HasValue ?
                new ObjectParameter("NQS_Domain_ID", nQS_Domain_ID) :
                new ObjectParameter("NQS_Domain_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Domain_Published_Result>("Measure_Of_Domain_Published", nQS_Domain_IDParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Domain_Unpublished_Result> Measure_Of_Domain_Unpublished(Nullable<int> nQS_Domain_ID)
        {
            var nQS_Domain_IDParameter = nQS_Domain_ID.HasValue ?
                new ObjectParameter("NQS_Domain_ID", nQS_Domain_ID) :
                new ObjectParameter("NQS_Domain_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Domain_Unpublished_Result>("Measure_Of_Domain_Unpublished", nQS_Domain_IDParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Measure_Type_Published_Result> Measure_Of_Measure_Type_Published(Nullable<int> measure_Type_ID)
        {
            var measure_Type_IDParameter = measure_Type_ID.HasValue ?
                new ObjectParameter("Measure_Type_ID", measure_Type_ID) :
                new ObjectParameter("Measure_Type_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Measure_Type_Published_Result>("Measure_Of_Measure_Type_Published", measure_Type_IDParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Measure_Type_Unpublished_Result> Measure_Of_Measure_Type_Unpublished(Nullable<int> measure_Type_ID)
        {
            var measure_Type_IDParameter = measure_Type_ID.HasValue ?
                new ObjectParameter("Measure_Type_ID", measure_Type_ID) :
                new ObjectParameter("Measure_Type_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Measure_Type_Unpublished_Result>("Measure_Of_Measure_Type_Unpublished", measure_Type_IDParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Scope_Published_Result> Measure_Of_Scope_Published(Nullable<int> measure_Scope_ID)
        {
            var measure_Scope_IDParameter = measure_Scope_ID.HasValue ?
                new ObjectParameter("Measure_Scope_ID", measure_Scope_ID) :
                new ObjectParameter("Measure_Scope_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Scope_Published_Result>("Measure_Of_Scope_Published", measure_Scope_IDParameter);
        }
    
        public virtual ObjectResult<Measure_Of_Scope_Unpublished_Result> Measure_Of_Scope_Unpublished(Nullable<int> measure_Scope_ID)
        {
            var measure_Scope_IDParameter = measure_Scope_ID.HasValue ?
                new ObjectParameter("Measure_Scope_ID", measure_Scope_ID) :
                new ObjectParameter("Measure_Scope_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Measure_Of_Scope_Unpublished_Result>("Measure_Of_Scope_Unpublished", measure_Scope_IDParameter);
        }
    
        public virtual int Edit_Domain(Nullable<int> nQS_Domain_ID, string nQS_Domain_Name)
        {
            var nQS_Domain_IDParameter = nQS_Domain_ID.HasValue ?
                new ObjectParameter("NQS_Domain_ID", nQS_Domain_ID) :
                new ObjectParameter("NQS_Domain_ID", typeof(int));
    
            var nQS_Domain_NameParameter = nQS_Domain_Name != null ?
                new ObjectParameter("NQS_Domain_Name", nQS_Domain_Name) :
                new ObjectParameter("NQS_Domain_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Edit_Domain", nQS_Domain_IDParameter, nQS_Domain_NameParameter);
        }
    
        public virtual int Edit_Measure_Scope(Nullable<int> measure_Scope_ID, string measure_Scope_Name)
        {
            var measure_Scope_IDParameter = measure_Scope_ID.HasValue ?
                new ObjectParameter("Measure_Scope_ID", measure_Scope_ID) :
                new ObjectParameter("Measure_Scope_ID", typeof(int));
    
            var measure_Scope_NameParameter = measure_Scope_Name != null ?
                new ObjectParameter("Measure_Scope_Name", measure_Scope_Name) :
                new ObjectParameter("Measure_Scope_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Edit_Measure_Scope", measure_Scope_IDParameter, measure_Scope_NameParameter);
        }
    
        public virtual int Edit_Measure_Type(Nullable<int> measure_Type_ID, string measure_Type_Name)
        {
            var measure_Type_IDParameter = measure_Type_ID.HasValue ?
                new ObjectParameter("Measure_Type_ID", measure_Type_ID) :
                new ObjectParameter("Measure_Type_ID", typeof(int));
    
            var measure_Type_NameParameter = measure_Type_Name != null ?
                new ObjectParameter("Measure_Type_Name", measure_Type_Name) :
                new ObjectParameter("Measure_Type_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Edit_Measure_Type", measure_Type_IDParameter, measure_Type_NameParameter);
        }
    }
}
